[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alex Rosenâ€™s Explorations with LLMs",
    "section": "",
    "text": "Vibe Coding: Finding Flow in Software Development\n\n\n\n\n\n\n\n\nSep 3, 2025\n\n\nAlex Rosen\n\n\n\n\n\n\n\n\n\n\n\n\nA test post\n\n\n\nLLMs\n\nprompting\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/002_test_test/test_test.html",
    "href": "posts/002_test_test/test_test.html",
    "title": "Vibe Coding: Finding Flow in Software Development",
    "section": "",
    "text": "When most people think about programming, they picture solving technical problems or shipping features. But thereâ€™s another side to coding â€” one that feels less like work and more like entering a state of flow. This is what I like to call vibe coding.\n\n\n\nVibe coding isnâ€™t about deadlines, bug tickets, or sprint goals. Itâ€™s about writing code for the sake of focus, creativity, and momentum.\nIn practice, this might mean: - Putting on music that helps you focus\n- Cleaning up your environment and editor so distractions disappear\n- Building something small, experimental, or even silly â€” just to see where it goes\nItâ€™s the programming equivalent of sketching in a notebook: low-pressure, creative, and surprisingly rewarding.\n\n\n\n\nModern development is often fast-paced and outcome-driven. While productivity is important, it can also lead to burnout if every coding session is framed around efficiency. Vibe coding offers a counterbalance â€” a reminder that programming can be playful and exploratory.\nBenefits include: - Improved creativity: experimenting without constraints often leads to unexpected ideas.\n- Sustained motivation: coding becomes something you look forward to, not just a task list.\n- Skill growth: practice in a low-stakes environment helps sharpen intuition and technique.\n\n\n\n\nIf you want to bring vibe coding into your own workflow, here are some ways to start: 1. Curate a playlist: lo-fi beats, ambient soundtracks, or anything that keeps you engaged without distraction.\n2. Set the stage: dim lights, a clear desk, maybe even a favorite drink nearby.\n3. Pick a fun project: it could be a visualization of your Spotify history, a quirky bot, or a small tool only you will ever use.\n4. Let go of outcomes: the point isnâ€™t to finish â€” itâ€™s to explore.\n\n\n\n\nCoding doesnâ€™t always have to be serious. Sometimes the best way to unlock creativity, reduce stress, and rediscover joy in programming is to let yourself vibe with the process.\nSo next time you sit down to write code, try setting aside the pressure of productivity. Put on some music, open a blank file, and let the vibes lead you â€” you might be surprised by what you create."
  },
  {
    "objectID": "posts/002_test_test/test_test.html#what-is-vibe-coding",
    "href": "posts/002_test_test/test_test.html#what-is-vibe-coding",
    "title": "Vibe Coding: Finding Flow in Software Development",
    "section": "",
    "text": "Vibe coding isnâ€™t about deadlines, bug tickets, or sprint goals. Itâ€™s about writing code for the sake of focus, creativity, and momentum.\nIn practice, this might mean: - Putting on music that helps you focus\n- Cleaning up your environment and editor so distractions disappear\n- Building something small, experimental, or even silly â€” just to see where it goes\nItâ€™s the programming equivalent of sketching in a notebook: low-pressure, creative, and surprisingly rewarding."
  },
  {
    "objectID": "posts/002_test_test/test_test.html#why-vibe-coding-matters",
    "href": "posts/002_test_test/test_test.html#why-vibe-coding-matters",
    "title": "Vibe Coding: Finding Flow in Software Development",
    "section": "",
    "text": "Modern development is often fast-paced and outcome-driven. While productivity is important, it can also lead to burnout if every coding session is framed around efficiency. Vibe coding offers a counterbalance â€” a reminder that programming can be playful and exploratory.\nBenefits include: - Improved creativity: experimenting without constraints often leads to unexpected ideas.\n- Sustained motivation: coding becomes something you look forward to, not just a task list.\n- Skill growth: practice in a low-stakes environment helps sharpen intuition and technique."
  },
  {
    "objectID": "posts/002_test_test/test_test.html#how-to-try-it-yourself",
    "href": "posts/002_test_test/test_test.html#how-to-try-it-yourself",
    "title": "Vibe Coding: Finding Flow in Software Development",
    "section": "",
    "text": "If you want to bring vibe coding into your own workflow, here are some ways to start: 1. Curate a playlist: lo-fi beats, ambient soundtracks, or anything that keeps you engaged without distraction.\n2. Set the stage: dim lights, a clear desk, maybe even a favorite drink nearby.\n3. Pick a fun project: it could be a visualization of your Spotify history, a quirky bot, or a small tool only you will ever use.\n4. Let go of outcomes: the point isnâ€™t to finish â€” itâ€™s to explore."
  },
  {
    "objectID": "posts/002_test_test/test_test.html#closing-thoughts",
    "href": "posts/002_test_test/test_test.html#closing-thoughts",
    "title": "Vibe Coding: Finding Flow in Software Development",
    "section": "",
    "text": "Coding doesnâ€™t always have to be serious. Sometimes the best way to unlock creativity, reduce stress, and rediscover joy in programming is to let yourself vibe with the process.\nSo next time you sit down to write code, try setting aside the pressure of productivity. Put on some music, open a blank file, and let the vibes lead you â€” you might be surprised by what you create."
  },
  {
    "objectID": "posts/000_test_post/index.html",
    "href": "posts/000_test_post/index.html",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purpleâ€¦\nBut it is possible you first said green (donâ€™t worry if you did it is quite a common response!)\n\n\nItâ€™s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | â€” | â€” | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt getâ€™s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. ðŸŸª\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, Iâ€™ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "href": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purpleâ€¦\nBut it is possible you first said green (donâ€™t worry if you did it is quite a common response!)\n\n\nItâ€™s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | â€” | â€” | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt getâ€™s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. ðŸŸª\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, Iâ€™ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]